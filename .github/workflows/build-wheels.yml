name: Build wheels

# Builds wheels and sends to QE and Aerospike artifactory
on:
  workflow_dispatch:

jobs:
  manylinux_arm64:
    if: ${{ false }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # Python versions to build wheels on
        python: [
          "cp37",
          "cp38",
          "cp39",
          "cp310"
        ]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Set up QEMU for cross compiling arm64
      uses: docker/setup-qemu-action@v2
      with:
        platforms: all

    - name: Set up Aerospike server
      run: docker run -d --name aerospike -p 3000-3002:3000-3002 aerospike/aerospike-server

    - name: Wait for server to start
      run: sleep 5

    - name: Set config.conf to use Docker IP address of Aerospike server
      # config.conf should be copied into the cibuildwheel Docker container
      run: |
        export SERVER_DOCKER_IP=$(docker container inspect -f '{{ .NetworkSettings.IPAddress }}' aerospike)
        pip install crudini
        crudini --set config.conf community-edition hosts ${SERVER_DOCKER_IP}:3000
      working-directory: test

    - name: Build wheel
      uses: pypa/cibuildwheel@v2.11.2
      env:
        CIBW_BUILD: ${{ matrix.python }}-manylinux_aarch64
        CIBW_BUILD_FRONTEND: build
        CIBW_BEFORE_ALL_LINUX: >
          yum install openssl-devel -y &&
          yum install python-devel -y &&
          yum install python-setuptools -y
        CIBW_ARCHS: "aarch64"
        CIBW_TEST_COMMAND: >
          cd {project}/test/ &&
          pip install -r requirements.txt &&
          python -m pytest new_tests/

    - name: Upload wheels to GitHub
      uses: actions/upload-artifact@v3
      with:
        path: ./wheelhouse/*.whl
        # Artifact name, not the file name
        name: manylinux-aarch64-${{ matrix.python }}

  manylinux_x86_64:
    if: ${{ false }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # Python versions to build wheels on
        python: [
          ["cp37", "3.7"],
          ["cp38", "3.8"],
          ["cp39", "3.9"],
          ["cp310", "3.10"]
        ]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Set up Aerospike server
      run: docker run -d --name aerospike -p 3000-3002:3000-3002 aerospike/aerospike-server

    - name: Wait for server to start
      run: sleep 5

    - name: Set config.conf to use Docker IP address of Aerospike server
      # config.conf should be copied into the cibuildwheel Docker container
      run: |
        export SERVER_DOCKER_IP=$(docker container inspect -f '{{ .NetworkSettings.IPAddress }}' aerospike)
        pip install crudini
        crudini --set config.conf community-edition hosts ${SERVER_DOCKER_IP}:3000
      working-directory: test

    - name: Build wheel
      uses: pypa/cibuildwheel@v2.11.2
      env:
        CIBW_BUILD: ${{ matrix.python[0] }}-manylinux_x86_64
        CIBW_BUILD_FRONTEND: build
        CIBW_BEFORE_ALL_LINUX: >
          yum install openssl-devel -y &&
          yum install python-devel -y &&
          yum install python-setuptools -y
        CIBW_ARCHS: "x86_64"
        CIBW_TEST_COMMAND: >
          cd {project}/test/ &&
          pip install -r requirements.txt &&
          python -m pytest new_tests/

    - name: Upload wheels to GitHub
      uses: actions/upload-artifact@v3
      with:
        path: ./wheelhouse/*.whl
        # Artifact name, not the file name
        name: manylinux-x86_64-${{ matrix.python[0] }}

  macOS-x86:
    if: ${{ false }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [
          ["cp37", "3.7"],
          ["cp38", "3.8"],
          ["cp39", "3.9"],
          ["cp310", "3.10"],
        ]
        os: [macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Set up Python ${{ matrix.python-version[1] }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version[1] }}

    - name: Build wheel
      uses: pypa/cibuildwheel@v2.11.2
      env:
        CIBW_BUILD: ${{ matrix.python-version[0] }}-macosx_x86_64
        CIBW_BUILD_FRONTEND: build
        CIBW_ENVIRONMENT: SSL_LIB_PATH="$(brew --prefix openssl@1.1)/lib/" CPATH="$(brew --prefix openssl@1.1)/include/" STATIC_SSL=1
        CIBW_ARCHS: "x86_64"
        CIBW_BEFORE_TEST: >
          vagrant up &&
          sleep 3 &&
          pip install -r test/requirements.txt
        CIBW_TEST_COMMAND: >
          cd {project}/test/ &&
          python -m pytest new_tests/

    - name: Save macOS wheel
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.os }}-x86_64-${{ matrix.python-version[0] }}
        path: wheelhouse/*.whl

  # Build M1 wheels on EC2
  macOS-m1:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    # TODO: need ssh key
    # Clone terraform module to parent dir
    - name: Get Terraform config to test M1 wheels
      run: |
        cd ..
        git clone git@github.com:citrusleaf/devops.git
        exit 1

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v2

    - run: terraform init
      working-directory: ../devops

    - run: terraform apply -auto-approve
      working-directory: ../devops

    - name: Get IP address of Mac M1 instance
      run: M1_HOST_IP=$(terraform output -raw mac-ip-address) >> $GITHUB_ENV
      working-directory: ../devops

    - name: Get IP address of server
      run: SERVER_IP=$(terraform output -raw aerospike-ip-address) >> $GITHUB_ENV
      working-directory: ../devops

    - name: Get raw contents of private key
      run: M1_PRIVATE_KEY=$(cat "Terraform EC2.pem") >> $GITHUB_ENV
      working-directory: ../devops

    - name: Copy over test script
      uses: appleboy/scp-action@master
      with:
        host: ${{ env.M1_HOST_IP }}
        username: ec2-user
        password: ''
        key: ${{ env.M1_PRIVATE_KEY }}
        source: ".github/workflows/test-m1-wheels.sh"
        target: "./"
        # Mac M1 instances take 40 mins to boot up
        # But we wait for 60 mins to be safe before timing out
        # https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-mac-instances.html
        timeout: "60m"

    - name: SSH into Mac M1 to build and test wheels
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: "${{ env.M1_HOST_IP }}"
        username: "ec2-user"
        password: ""
        key: "${{ env.M1_PRIVATE_KEY }}"
        script: |
          currentBranch=$(git branch --show-current)
          zsh test-m1-wheels.sh "${{ env.SERVER_IP }}" $currentBranch

    - name: Download wheels from Mac M1
      run: scp -R -i <(${{ env.M1_PRIVATE_KEY }}) ec2-user@${{ env.M1_HOST_IP }}:aerospike-client-python/wheelhouse/ wheelhouse/

    # TODO
    - name: Set up AWS CLI to flag instance
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: arn:aws:iam::123456789100:role/my-github-actions-role
        aws-region: us-west-2

    - name: Flag instance and host for self-destruct
      run: |
        # Get instance and host ids
        instanceId=$(terraform show -json | jq '.values.root_module.resources[] | select(.name == "mac-m1-instance").values.id')
        hostId=$(terraform show -json | jq '.values.root_module.resources[] | select(.name == "mac-m1-host").values.id')
        # Set tags
        aws ec2 create-tags --resources "$instanceId" --tags Key=destroy,Value=""
        aws ec2 create-tags --resources "$hostId" --tags Key=destroy,Value=""

    - name: Save macOS wheel
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.os }}-arm64-${{ matrix.python }}
        path: wheelhouse/*.whl

  send-to-qe:
    needs: [manylinux_x86_64, manylinux_arm64]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - run: echo "Upload to QE"
      # - uses: shallwefootball/s3-upload-action@master
      #   with:
      #     aws_key_id: ${{ secrets.AWS_KEY_ID }}
      #     aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
      #     aws_bucket: ${{ secrets.AWS_BUCKET }}
      #     # Send all distributions to QE build system
      #     source_dir: './wheelhouse'

  send-to-artifactory:
    needs: [manylinux_x86_64, manylinux_arm64, macOS-x86, macOS-m1]
    runs-on: ubuntu-latest
    steps:
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3
        with:
          path: wheelhouse/

      - name: Reorganize artifacts
        # Move wheels from their folders into base folder
        run: |
          find wheelhouse/ -type f -exec mv {} . \;
          rm -r wheelhouse/

      # Store sensitive data in openvpn config template
      - name: Install OpenVPN
        run: |
          sudo apt update
          sudo apt install -y openvpn openvpn-systemd-resolved

      - uses: bluwy/substitute-string-action@v1
        id: sub
        with:
          _input-file: ".github/workflows/aerospike.ovpn"
          _format-key: '%%key%%'
          VPN_URL: ${{ secrets.VPN_URL }}
          CA_CERT: ${{ secrets.CA_CERT }}
          CERT: ${{ secrets.CERT }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          OPENVPN_STATIC_KEY: ${{ secrets.OPENVPN_STATIC_KEY }}
          _output-file: ".github/workflows/aerospike.ovpn"

      - name: Connect to Aerospike VPN
        uses: "kota65535/github-openvpn-connect-action@v2"
        with:
          config_file: ".github/workflows/aerospike.ovpn"
          username: ${{ secrets.VPN_USERNAME }}
          password: ${{ secrets.VPN_PASSWORD }}

      - name: Upload artifacts to Aerospike artifactory
        uses: burnett01/rsync-deployments@5.2.1
        with:
          switches: -avzr --delete
          path: wheelhouse/
          remote_path: /var/www/artifacts/development/aerospike-client-python/
          remote_host: ${{ secrets.ARTIFACTORY_HOST_IP }}
          remote_user: ${{ secrets.ARTIFACTORY_USERNAME }}
          remote_key: ${{ secrets.ARTIFACTORY_PRIVATE_KEY }}

      - name: Verify artifacts are uploaded
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.ARTIFACTORY_HOST_IP }}
          username: ${{ secrets.ARTIFACTORY_USERNAME }}
          password: ''
          key: ${{ secrets.ARTIFACTORY_PRIVATE_KEY }}
          script: "ls /var/www/artifacts/development/aerospike-client-python/"
